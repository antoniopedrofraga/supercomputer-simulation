<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="utils_8cpp" kind="file" language="C++">
    <compoundname>utils.cpp</compoundname>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <incdepgraph>
      <node id="265">
        <label>float.h</label>
      </node>
      <node id="262">
        <label>supercomputer/src/utils/utils.cpp</label>
        <link refid="utils.cpp"/>
        <childnode refid="263" relation="include">
        </childnode>
      </node>
      <node id="264">
        <label>random</label>
      </node>
      <node id="266">
        <label>vector</label>
      </node>
      <node id="263">
        <label>utils.h</label>
        <link refid="utils_8h_source"/>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
      </node>
      <node id="267">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="utils_8cpp_1a922ea9938b27158961175da47eacbdcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int generate_random</definition>
        <argsstring>(int low, int high)</argsstring>
        <name>generate_random</name>
        <param>
          <type>int</type>
          <declname>low</declname>
        </param>
        <param>
          <type>int</type>
          <declname>high</declname>
        </param>
        <briefdescription>
<para>Public method. Method to generate a random integer value following a linear distribution. This value lies between a lower and upper bound. </para>        </briefdescription>
        <detaileddescription>
<para>Public const unsigned long long. Default requests time span upper bound. The configuration value is initialized with this value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>low. Lower bound. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>high. Upper bound. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int. Randomly generated integer value. </para></simplesect>
<simplesect kind="see"><para>unsigned int generate_random(unsigned int low, unsigned int high) </para></simplesect>
<simplesect kind="see"><para>double generate_random(double low, double high) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="supercomputer/src/utils/utils.cpp" line="8" column="1" bodyfile="supercomputer/src/utils/utils.cpp" bodystart="8" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a005b8a9907ecda6a5d1cc679f359c4eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int generate_random</definition>
        <argsstring>(unsigned int low, unsigned int high)</argsstring>
        <name>generate_random</name>
        <param>
          <type>unsigned int</type>
          <declname>low</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>high</declname>
        </param>
        <briefdescription>
<para>Public method. Method to generate a random unsigned integer value following a linear distribution. This value lies between a lower and upper bound. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unsigned</parametername>
</parameternamelist>
<parameterdescription>
<para>int low. Lower bound. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unsigned</parametername>
</parameternamelist>
<parameterdescription>
<para>int high. Upper bound. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned int. Randomly generated unsigned integer value. </para></simplesect>
<simplesect kind="see"><para>int generate_random(int low, int high) </para></simplesect>
<simplesect kind="see"><para>double generate_random(double low, double high) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="supercomputer/src/utils/utils.cpp" line="18" column="1" bodyfile="supercomputer/src/utils/utils.cpp" bodystart="18" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1abf4b1e0b40143d203b5f8383e0a22236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double generate_random</definition>
        <argsstring>(double low, double high)</argsstring>
        <name>generate_random</name>
        <param>
          <type>double</type>
          <declname>low</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high</declname>
        </param>
        <briefdescription>
<para>Public method. Method to generate a random double value following a linear distribution. This value lies between a lower and upper bound. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>double</parametername>
</parameternamelist>
<parameterdescription>
<para>low. Lower bound. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>double</parametername>
</parameternamelist>
<parameterdescription>
<para>high. Upper bound. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double. Randomly generated double value. </para></simplesect>
<simplesect kind="see"><para>int generate_random(int low, int high) </para></simplesect>
<simplesect kind="see"><para>unsigned int generate_random(unsigned int low, unsigned int high) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="supercomputer/src/utils/utils.cpp" line="28" column="1" bodyfile="supercomputer/src/utils/utils.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a154e11312aa498d684ee7ed9d425439a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_weekend</definition>
        <argsstring>(time_t start, time_t end)</argsstring>
        <name>is_weekend</name>
        <param>
          <type>time_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Public method. Method to check if a job runs through the weekend. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_t</parametername>
</parameternamelist>
<parameterdescription>
<para>start. Starting time of a job. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time_t</parametername>
</parameternamelist>
<parameterdescription>
<para>end. Ending time of a job. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool. True if it does, false if doesn&apos;t. </para></simplesect>
<simplesect kind="see"><para>bool is_weekend(time_t start) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="supercomputer/src/utils/utils.cpp" line="37" column="1" bodyfile="supercomputer/src/utils/utils.cpp" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1ac3420a318a42603ec9c9d32d4748b98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_weekend</definition>
        <argsstring>(time_t start)</argsstring>
        <name>is_weekend</name>
        <param>
          <type>time_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Public method. Method to check if a job starts in a weekend. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_t</parametername>
</parameternamelist>
<parameterdescription>
<para>start. Starting time of a job. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool. True if it does, false if doesn&apos;t. </para></simplesect>
<simplesect kind="see"><para>bool is_weekend(time_t start, time_t end) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="supercomputer/src/utils/utils.cpp" line="51" column="1" bodyfile="supercomputer/src/utils/utils.cpp" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a2a95cd9f87463141a0996904e313a46a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>time_t</type>
        <definition>time_t advance_weekend</definition>
        <argsstring>(time_t start)</argsstring>
        <name>advance_weekend</name>
        <param>
          <type>time_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Public method. Advances a given time until Monday at 9:00. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_t</parametername>
</parameternamelist>
<parameterdescription>
<para>start. Starting time of a job. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>time_t. Next Monday at 9:00 in UNIX timestamp. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="supercomputer/src/utils/utils.cpp" line="64" column="1" bodyfile="supercomputer/src/utils/utils.cpp" bodystart="64" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1acb74aab2b1555fecd2bd0956b352dcd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>time_t</type>
        <definition>time_t advance_to_friday</definition>
        <argsstring>(time_t start)</argsstring>
        <name>advance_to_friday</name>
        <param>
          <type>time_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Public method. Advances a given time until Friday at 17:00. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_t</parametername>
</parameternamelist>
<parameterdescription>
<para>start. Starting time of a job. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>time_t. Next Friday at 17:00 in UNIX timestamp. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="supercomputer/src/utils/utils.cpp" line="84" column="1" bodyfile="supercomputer/src/utils/utils.cpp" bodystart="84" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a7aab7e0568d3e2b2fdee79807d1010c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>time_t</type>
        <definition>time_t get_back_to_monday</definition>
        <argsstring>(time_t start)</argsstring>
        <name>get_back_to_monday</name>
        <param>
          <type>time_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Public method. Returns a given time to Monday at 9:00. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_t</parametername>
</parameternamelist>
<parameterdescription>
<para>start. Starting time of a job. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>time_t. Previous Monday at 9:00 in UNIX timestamp. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="supercomputer/src/utils/utils.cpp" line="103" column="1" bodyfile="supercomputer/src/utils/utils.cpp" bodystart="103" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>Method<sp/>to<sp/>generate<sp/>a<sp/>random<sp/>integer<sp/>between<sp/>two<sp/>limits.</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>generate_random(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>mt19937<sp/>rng;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>rng.seed(std::random_device()());</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>uniform_int_distribution&lt;mt19937::result_type&gt;<sp/>distribution(low,<sp/>high);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distribution(rng);</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>Method<sp/>to<sp/>generate<sp/>a<sp/>random<sp/>unsigned<sp/>integer<sp/>between<sp/>two<sp/>limits.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>generate_random(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>mt19937<sp/>rng;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>rng.seed(std::random_device()());</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>uniform_int_distribution&lt;mt19937::result_type&gt;<sp/>distribution(low,<sp/>high);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)distribution(rng);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/>Method<sp/>to<sp/>generate<sp/>a<sp/>random<sp/>double<sp/>between<sp/>two<sp/>limits.</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>generate_random(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::default_random_engine<sp/>rng;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>uniform_real_distribution&lt;double&gt;<sp/>distribution(low,<sp/>high);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distribution(rng);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>Method<sp/>to<sp/>generate<sp/>to<sp/>check<sp/>if<sp/>a<sp/>job<sp/>runs<sp/>through<sp/>the<sp/>weekend.</highlight></codeline>
<codeline lineno="36"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_weekend(time_t<sp/>start,<sp/>time_t<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*tm_start<sp/>=<sp/>localtime(&amp;start),<sp/>*tm_end<sp/>=<sp/>localtime(&amp;end);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_day<sp/>=<sp/>tm_start-&gt;tm_wday,<sp/>end_day<sp/>=<sp/>tm_end-&gt;tm_wday,<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>start_hour<sp/>=<sp/>tm_start-&gt;tm_hour,<sp/>end_hour<sp/>=<sp/>tm_end-&gt;tm_hour;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>weekend<sp/>=<sp/>(start_day<sp/>==<sp/>SATURDAY<sp/>||<sp/>end_day<sp/>==<sp/>SATURDAY)<sp/>||</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(start_day<sp/>==<sp/>SUNDAY<sp/>||<sp/>end_day<sp/>==<sp/>SUNDAY)<sp/>||</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((start_day<sp/>==<sp/>FRIDAY<sp/>&amp;&amp;<sp/>start_hour<sp/>&gt;=<sp/>17)<sp/>||<sp/>(end_day<sp/>==<sp/>FRIDAY<sp/>&amp;&amp;<sp/>end_hour<sp/>&gt;=<sp/>17))<sp/>||</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((start_day<sp/>==<sp/>MONDAY<sp/>&amp;&amp;<sp/>start_hour<sp/>&lt;<sp/>9)<sp/>||<sp/>(end_day<sp/>==<sp/>MONDAY<sp/>&amp;&amp;<sp/>end_hour<sp/>&lt;<sp/>9));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weekend;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>Method<sp/>to<sp/>generate<sp/>to<sp/>check<sp/>if<sp/>a<sp/>job<sp/>runs<sp/>through<sp/>the<sp/>weekend.</highlight></codeline>
<codeline lineno="50"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_weekend(time_t<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*tm_start<sp/>=<sp/>localtime(&amp;start);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_day<sp/>=<sp/>tm_start-&gt;tm_wday,<sp/>start_hour<sp/>=<sp/>tm_start-&gt;tm_hour;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>weekend<sp/>=<sp/>(start_day<sp/>==<sp/>SATURDAY)<sp/>||</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(start_day<sp/>==<sp/>SUNDAY)<sp/>||</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(start_day<sp/>==<sp/>FRIDAY<sp/>&amp;&amp;<sp/>start_hour<sp/>&gt;=<sp/>17)<sp/>||</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(start_day<sp/>==<sp/>MONDAY<sp/>&amp;&amp;<sp/>start_hour<sp/>&lt;<sp/>9);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weekend;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>Method<sp/>to<sp/>return<sp/>the<sp/>next<sp/>Monday<sp/>at<sp/>9:00<sp/>in<sp/>UNIX<sp/>timestamp<sp/>from<sp/>a<sp/>given<sp/>time.</highlight></codeline>
<codeline lineno="63"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">time_t<sp/>advance_weekend(time_t<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*tm_start<sp/>=<sp/>localtime(&amp;start);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tm_start-&gt;tm_wday<sp/>==<sp/>MONDAY<sp/>&amp;&amp;<sp/>tm_start-&gt;tm_hour<sp/>&gt;=<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>ONE_DAY;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm_start<sp/>=<sp/>localtime(&amp;start);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tm_start-&gt;tm_wday<sp/>!=<sp/>MONDAY)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>ONE_DAY;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm_start<sp/>=<sp/>localtime(&amp;start);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>tm_start-&gt;tm_hour<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>tm_start-&gt;tm_min<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>tm_start-&gt;tm_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mktime(tm_start);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/>Method<sp/>to<sp/>return<sp/>the<sp/>next<sp/>Friday<sp/>at<sp/>17:00<sp/>in<sp/>UNIX<sp/>timestamp<sp/>from<sp/>a<sp/>given<sp/>time.</highlight></codeline>
<codeline lineno="83"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">time_t<sp/>advance_to_friday(time_t<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*tm_start<sp/>=<sp/>localtime(&amp;start);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tm_start-&gt;tm_wday<sp/>==<sp/>FRIDAY<sp/>&amp;&amp;<sp/>tm_start-&gt;tm_hour<sp/>&gt;=<sp/>17)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>ONE_DAY;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm_start<sp/>=<sp/>localtime(&amp;start);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tm_start-&gt;tm_wday<sp/>!=<sp/>FRIDAY)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>ONE_DAY;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm_start<sp/>=<sp/>localtime(&amp;start);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>tm_start-&gt;tm_hour<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>tm_start-&gt;tm_min<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>tm_start-&gt;tm_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mktime(tm_start);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/>Method<sp/>to<sp/>return<sp/>the<sp/>previous<sp/>Monday<sp/>at<sp/>9:00<sp/>in<sp/>UNIX<sp/>timestamp<sp/>from<sp/>a<sp/>given<sp/>time.</highlight></codeline>
<codeline lineno="102"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">time_t<sp/>get_back_to_monday(time_t<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*tm_start<sp/>=<sp/>localtime(&amp;start);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tm_start-&gt;tm_wday<sp/>!=<sp/>MONDAY)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>-=<sp/>ONE_DAY;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm_start<sp/>=<sp/>localtime(&amp;start);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>tm_start-&gt;tm_hour<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>tm_start-&gt;tm_min<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>tm_start-&gt;tm_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mktime(tm_start);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="supercomputer/src/utils/utils.cpp"/>
  </compounddef>
</doxygen>
